name: DbaC Deploy

on:
  workflow_dispatch:

  pull_request:
    branches:
      - main

env:
  # Set the default postgresql user admin password:
  TF_VAR_postgresql_default_password: ${{ secrets.POSTGRES_USER_DEFAULT_PASSWORD }}

jobs:

  infra_scan:
    name: 'Infra Scan'
    runs-on: ubuntu-latest

    permissions:
      # required for all workflows
      security-events: write
      contents: 'read'

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: 'actions/checkout@v4' 

    - name: Make Infra Scan Directory
      run: mkdir -p infra_scan_results
    
    - name: run kics Scan
      uses: Checkmarx/kics-github-action@v2.1.13
      with:
        path: '.'
        ignore_on_exit: results #dont fail on results (overwrite default behaviour fails)
        output_path: 'infra_scan_results' # when provided with a directory on output_path it will generate the specified reports file named 'results.{extension}'
        platform_type: terraform
        output_formats: 'json,sarif'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: infra_scan_results/results.sarif

  docs:
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'write'
    
    steps:
    - uses: actions/checkout@v3
      with:
        ref:  ${{ github.event.pull_request.head.ref }} # Use the PR branch for checkout

    - name: Render terraform docs inside the README.md and push changes back to PR branch
      uses: terraform-docs/gh-actions@v1.4.1
      with:
        working-dir: .
        output-file: README.md
        output-method: inject
        git-push: "true"

  dbac_deploy:
    runs-on: DbaC
    needs: [docs]

    defaults:
      run:
        working-directory: './'

    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: 'read'

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: 'actions/checkout@v4'

    - name: Detect changes
      uses: dorny/paths-filter@v3
      id: detect-changes
      with:
        filters: |
          terraform:
            - 'versions.tf'
            - 'provider.tf'
            - 'tfvars/wsl.tfvars'
            - 'entrypoint.tf'
            - 'modules/**'
            - .github/workflows/dbac-deploy.yaml
        continue-on-error: false

    # Install Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20' # Use the appropriate version of Node.js
          
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.9.0"
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: "Terraform Format"
      id: fmt
      run: terraform fmt
      continue-on-error: false
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: "Terraform Initialize"
      if: steps.detect-changes.outputs.terraform == 'true'
      id: init
      run: |
        terraform init  -backend-config="backends/wsl.hcl" -input=false
      continue-on-error: false

    # Generates an execution plan for Terraform
    - name: "Terraform Plan"
      id: plan
      run: terraform plan  -var-file tfvars/wsl.tfvars -refresh=true -input=false -lock=false  -no-color
      continue-on-error: false
  
    - name: "Terraform Apply"
      id: apply
      if: steps.plan.outcome == 'success'
      run: terraform apply  -var-file tfvars/wsl.tfvars -input=false -lock=false -auto-approve -no-color